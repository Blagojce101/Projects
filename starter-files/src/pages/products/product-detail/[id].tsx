import CollapseSection from "@/Components/CollapseSection";
import { CollapseType, ProductType } from "@/interfaces/interfaces";
import { GetStaticPaths, GetStaticProps, NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import { LS_PRODUCTS } from "..";
import ReleatedProducts from "@/Components/ReleatedProducts";

interface Props {
  product: ProductType;
  collapseData: CollapseType;
  productsData: ProductType[];
}

const ProductDetailPage: NextPage<Props> = ({
  product,
  collapseData,
  productsData,
}) => {
  const [counter, setCounter] = useState<number>(1);
  const [isFavourite, setIsFavourite] = useState<boolean>(false);
  const [products, setProducts] = useState<ProductType[]>([]);
  const [currentProduct, setCurrentProduct] = useState<ProductType>();
  const [mainPhoto, setMainPhoto] = useState<string>(product.img);

  useEffect(() => {
    const productsFromLS = JSON.parse(localStorage.getItem(LS_PRODUCTS)!);
    setProducts(productsFromLS);
  }, []);

  const handleIncrement = () => {
    counter < 5 ? setCounter(counter + 1) : null;
  };

  const handleDecrement = () => {
    counter > 1 ? setCounter(counter - 1) : null;
  };

  const handleIsFavourite = (id: string) => {
    setIsFavourite(
      product.isFavourite === false
        ? isFavourite === false
        : isFavourite === true
    );

    const updatedProducts = products.map((product) => {
      if (product.id === id) {
        const updatedProduct = {
          ...product,
          isFavourite: !product.isFavourite,
        };
        return updatedProduct;
      }
      return product;
    });

    setProducts(updatedProducts);
    localStorage.setItem(LS_PRODUCTS, JSON.stringify(updatedProducts));
  };

  const handleAddToCart = (id: string) => {
    const updatedProducts = products.map((product) => {
      if (product.id === id) {
        const updatedProduct = {
          ...product,
          addToCart: !product.addToCart,
        };
        return updatedProduct;
      }
      return product;
    });

    setProducts(updatedProducts);
    localStorage.setItem(LS_PRODUCTS, JSON.stringify(updatedProducts));
  };

  const changeMainPhoto = (newPhoto: string) => {
    setMainPhoto(newPhoto);
  };

  return (
    <>
      <Head>
        <title>{product.title && product.title}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <div className="container-fluid d-flex justify-content-center align-items-center">
        <div className="row w-100">
          <div className="col-12">
            <p className="font-4" style={{ fontSize: "23px" }}>
              {product.title && product.title}
            </p>
          </div>
        </div>
      </div>

      <div className="container-fluid d-flex justify-content-center align-items-center mb-3">
        <div className="row">
          <div className="col-sm-12 col-lg-6 mb-2">
            <div>
              <img
                src={mainPhoto}
                alt={mainPhoto}
                style={{ width: "100%", height: "500px" }}
              />
            </div>
            <div className="d-flex overflow-hidden mt-2">
              {product.images.map((image, idx) => {
                return (
                  <div
                    key={`${image}-${idx}`}
                    className="mx-1"
                    onClick={(
                      event: React.MouseEvent<HTMLDivElement, MouseEvent>
                    ) => {
                      event.preventDefault();
                      changeMainPhoto(image);
                    }}>
                    <img
                      src={image}
                      alt=""
                      style={{ width: "100px", height: "120px" }}
                    />
                  </div>
                );
              })}
            </div>
          </div>

          <div className="col-sm-12 col-lg-6">
            <div className="mb-2">
              <p className="price-font m-0">
                {product.price && product.price} ден.
              </p>
              <p className="font-3 m-0">
                {product.description && product.description}
              </p>
            </div>

            <div className="d-flex justify-content-start flex-wrap mb-3">
              <div className="d-flex w-sm-100 w-lg-50 mb-2">
                <p className="mr-2 font-4 m-0">Количина:</p>

                <button
                  className="btn-rounded mr-2 text-muted"
                  onClick={(
                    event: React.MouseEvent<HTMLButtonElement, MouseEvent>
                  ) => {
                    event.preventDefault();
                    handleDecrement();
                  }}>
                  -
                </button>
                <p className="m-0 mr-2 font-4">{counter}</p>
                <button
                  className="btn-rounded mr-3 font-4 text-muted"
                  onClick={(
                    event: React.MouseEvent<HTMLButtonElement, MouseEvent>
                  ) => {
                    event.preventDefault();
                    handleIncrement();
                  }}>
                  +
                </button>
              </div>
              <div className="d-flex">
                <button
                  className="mr-2 add-to-cart-btn font-4"
                  onClick={(
                    event: React.MouseEvent<HTMLButtonElement, MouseEvent>
                  ) => {
                    event.preventDefault();

                    handleAddToCart(product.id);
                  }}>
                  Додај во кошничка
                </button>

                <button
                  className="border-0 bg-transparent mr-2"
                  onClick={(
                    event: React.MouseEvent<HTMLButtonElement, MouseEvent>
                  ) => {
                    event.preventDefault();
                    handleIsFavourite(product.id);
                  }}>
                  {isFavourite === false ? (
                    <i className="fa-regular fa-heart fa-2x"></i>
                  ) : (
                    <i className="fa-solid fa-heart fa-2x"></i>
                  )}
                </button>
              </div>
            </div>

            <div className="line" />

            {product.size && product.sizeDescription && (
              <>
                <div className="my-2">
                  <div className="d-flex mb-2">
                    {product.size && (
                      <>
                        <p className="m-0 mr-2 font-4">Величина:</p>
                        <div
                          className="product-size-square mr-2 m-0 font-4 text-center"
                          style={{ backgroundColor: "#FFDBDB" }}>
                          {product.size}
                        </div>
                      </>
                    )}
                  </div>
                  <div>
                    {product.sizeDescription && (
                      <>
                        <p className="font-5-small m-0 text-muted">
                          {product.sizeDescription}
                        </p>
                      </>
                    )}

                    <p className="font-5-small m-0 underline">
                      види ги димензиите
                    </p>
                  </div>
                </div>

                <div className="line" />
              </>
            )}

            <div className="mt-3">
              <div className="d-flex mb-2">
                <p className="mr-2 font-4 m-0">Боја:</p>
                <div
                  className="product-color-square mr-2"
                  style={{ background: product.color }}
                />
                <p className="font-5-small text-muted m-0">
                  {product.color && product.color}
                </p>
              </div>
              <div className="d-flex align-items-center mb-2">
                <p className="m-0 mr-2 font-4">Материјал: </p>
                <p className="font-5-small text-muted m-0">
                  {product.material && product.material}
                </p>
              </div>

              <div className="d-flex align-items-center mb-2">
                <p className="font-4 m-0">Состојба:</p>
                <p className="font-5-small text-muted m-0">10/10</p>
              </div>

              <div>
                <p className="mb-1 font-4">Насоки за одржување:</p>
                <p className="font-5-small text-muted">
                  {product.maintaining && product.maintaining}
                </p>
              </div>
            </div>

            <div className="line" />
          </div>
        </div>
      </div>

      <CollapseSection text={collapseData.text} />
      <ReleatedProducts products={productsData} />
    </>
  );
};

export default ProductDetailPage;

export const getStaticPaths: GetStaticPaths = async () => {
  const productRes = await fetch(`http://localhost:5001/products`);
  const productData: ProductType[] = await productRes.json();

  const paths = productData.map((product) => {
    return {
      params: {
        id: product.id,
      },
    };
  });

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps: GetStaticProps = async ({ params }) => {
  let product: ProductType | undefined = undefined;

  if (params?.id) {
    const productRes = await fetch(
      `http://localhost:5001/products/${params.id}`
    );
    product = await productRes.json();
  }

  const collapseRes = await fetch(`http://localhost:5001/collapse_text`);
  const collapseData: CollapseType = await collapseRes.json();

  const productsRes = await fetch(`http://localhost:5001/products`);
  const productsData: ProductType[] = await productsRes.json();

  return {
    props: { product, collapseData, productsData },
  };
};
